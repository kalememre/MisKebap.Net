// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MisKebap.DAL.Context;

namespace MisKebap.DAL.Migrations
{
    [DbContext(typeof(MisKebapContext))]
    [Migration("20211114162007_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("MisKebap.DAL.Entities.AboutUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<int>("PortionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SaladTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("PortionTypeId");

                    b.HasIndex("SaladTypeId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Customer", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("GetEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GetSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varbinary(1000)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varbinary(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)")
                        .IsFixedLength(true);

                    b.Property<string>("PushToken")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<int>("NBHId")
                        .HasColumnType("int");

                    b.Property<string>("Person")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NBHId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoleId");

                    b.ToTable("CustomerRoles");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.NBH", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NBHs");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<int>("CustomerAddressId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitDateTime")
                        .HasColumnType("datetime");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PortionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SaladTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PortionTypeId");

                    b.HasIndex("SaladTypeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Portion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Portions");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.PortionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("HasExtra")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PortionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortionId");

                    b.ToTable("PortionTypes");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CDate = new DateTime(2021, 11, 14, 19, 20, 6, 453, DateTimeKind.Local).AddTicks(8250),
                            IsDeleted = false,
                            Name = "customer"
                        },
                        new
                        {
                            Id = 2,
                            CDate = new DateTime(2021, 11, 14, 19, 20, 6, 468, DateTimeKind.Local).AddTicks(8190),
                            IsDeleted = false,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Salad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<bool>("Multiple")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Salads");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.SaladType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SaladId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaladId");

                    b.ToTable("SaladTypes");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.WriteUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CUser")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MUser")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WriteUs");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Cart", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Customer", "CustomerFK")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.Extra", "ExtraFK")
                        .WithMany("Carts")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.PortionType", "PortionTypeFK")
                        .WithMany("Carts")
                        .HasForeignKey("PortionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.SaladType", "SaladTypeFK")
                        .WithMany("Carts")
                        .HasForeignKey("SaladTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerFK");

                    b.Navigation("ExtraFK");

                    b.Navigation("PortionTypeFK");

                    b.Navigation("SaladTypeFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.CustomerAddress", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Customer", "CustomerFK")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.NBH", "NBHFK")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("NBHId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerFK");

                    b.Navigation("NBHFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.CustomerRole", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Customer", "CustomerFK")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.Role", "RoleFK")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerFK");

                    b.Navigation("RoleFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Order", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.CustomerAddress", "CustomerAddressFK")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.Customer", "CustomerFK")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.PaymentType", "PaymentTypeFK")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAddressFK");

                    b.Navigation("CustomerFK");

                    b.Navigation("PaymentTypeFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.OrderDetail", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Extra", "ExtraFK")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.Order", "OrderFK")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.PortionType", "PortionTypeFK")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PortionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisKebap.DAL.Entities.SaladType", "SaladTypeFK")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SaladTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraFK");

                    b.Navigation("OrderFK");

                    b.Navigation("PortionTypeFK");

                    b.Navigation("SaladTypeFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Portion", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Product", "ProductFK")
                        .WithMany("Portions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.PortionType", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Portion", "PortionFK")
                        .WithMany("PortionTypes")
                        .HasForeignKey("PortionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortionFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Product", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Category", "CategoryFK")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.SaladType", b =>
                {
                    b.HasOne("MisKebap.DAL.Entities.Salad", "SaladFK")
                        .WithMany("SaladTypes")
                        .HasForeignKey("SaladId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaladFK");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerRoles");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.CustomerAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Extra", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.NBH", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.PaymentType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Portion", b =>
                {
                    b.Navigation("PortionTypes");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.PortionType", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Product", b =>
                {
                    b.Navigation("Portions");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Role", b =>
                {
                    b.Navigation("CustomerRoles");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.Salad", b =>
                {
                    b.Navigation("SaladTypes");
                });

            modelBuilder.Entity("MisKebap.DAL.Entities.SaladType", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
